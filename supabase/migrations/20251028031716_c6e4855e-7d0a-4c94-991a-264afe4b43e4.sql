-- Phase 7: Security and Performance Enhancements
-- Fix all security issues identified in the security scan

-- 1. Fix user_roles table - add policies for role management
-- Only allow system to create/modify roles, users can only read their own
CREATE POLICY "System can insert user roles" ON public.user_roles
  FOR INSERT 
  WITH CHECK (false); -- Block all user inserts, roles should be created via backend/admin

CREATE POLICY "System can update user roles" ON public.user_roles
  FOR UPDATE 
  USING (false); -- Block all user updates

CREATE POLICY "System can delete user roles" ON public.user_roles
  FOR DELETE 
  USING (false); -- Block all user deletes

-- 2. Fix areas table - restrict to admin only
-- Drop the existing policy that allows any authenticated user to insert
DROP POLICY IF EXISTS "Authenticated users can insert areas" ON public.areas;

-- Add new restrictive policy (areas should only be managed by admins/system)
CREATE POLICY "Only system can insert areas" ON public.areas
  FOR INSERT 
  WITH CHECK (false); -- Block all user inserts, areas should be managed by admin

-- 3. Fix traffic_data table - add validation and restrict insertions
-- Drop existing policy that allows any authenticated user
DROP POLICY IF EXISTS "Authenticated users can insert traffic data" ON public.traffic_data;

-- Add policy that only allows insertions from authenticated users who own the upload
-- This ties traffic data to user_uploads table for accountability
CREATE POLICY "Users can insert their uploaded traffic data" ON public.traffic_data
  FOR INSERT 
  WITH CHECK (
    auth.uid() IS NOT NULL
    AND EXISTS (
      SELECT 1 FROM public.user_uploads 
      WHERE user_id = auth.uid() 
      AND status = 'processing'
      AND created_at > NOW() - INTERVAL '1 hour' -- Recent uploads only
    )
  );

-- 4. Fix traffic_analytics table - restrict to system only
DROP POLICY IF EXISTS "Authenticated users can insert analytics" ON public.traffic_analytics;
DROP POLICY IF EXISTS "Authenticated users can update analytics" ON public.traffic_analytics;

-- Only allow system/backend to manage analytics
CREATE POLICY "Only system can insert analytics" ON public.traffic_analytics
  FOR INSERT 
  WITH CHECK (false); -- Block user inserts, should be generated by system

CREATE POLICY "Only system can update analytics" ON public.traffic_analytics
  FOR UPDATE 
  USING (false); -- Block user updates

-- 5. Fix profiles table - restrict public access
-- Drop the overly permissive policy
DROP POLICY IF EXISTS "Profiles are viewable by everyone" ON public.profiles;

-- Add more restrictive policy - users can only view their own profile
CREATE POLICY "Users can view their own profile" ON public.profiles
  FOR SELECT 
  USING (auth.uid() = id);

-- 6. Add indexes for better performance
CREATE INDEX IF NOT EXISTS idx_traffic_data_area_timestamp ON public.traffic_data(area_id, timestamp DESC);
CREATE INDEX IF NOT EXISTS idx_traffic_analytics_area_date ON public.traffic_analytics(area_id, analysis_date DESC);
CREATE INDEX IF NOT EXISTS idx_user_uploads_user_status ON public.user_uploads(user_id, status);

-- 7. Add constraints for data validation
-- Ensure density_score is within valid range
ALTER TABLE public.traffic_data 
  DROP CONSTRAINT IF EXISTS check_density_score_range;
  
ALTER TABLE public.traffic_data 
  ADD CONSTRAINT check_density_score_range 
  CHECK (density_score >= 0 AND density_score <= 100);

-- 8. Add function to safely insert traffic data from uploads
-- This will be called from the application after file validation
CREATE OR REPLACE FUNCTION public.insert_traffic_data_from_upload(
  p_user_id UUID,
  p_records JSONB
)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_record JSONB;
  v_upload_active BOOLEAN;
BEGIN
  -- Verify user has an active upload
  SELECT EXISTS(
    SELECT 1 FROM public.user_uploads 
    WHERE user_id = p_user_id 
    AND status = 'processing'
    AND created_at > NOW() - INTERVAL '1 hour'
  ) INTO v_upload_active;
  
  IF NOT v_upload_active THEN
    RAISE EXCEPTION 'No active upload found for user';
  END IF;
  
  -- Insert validated records
  FOR v_record IN SELECT * FROM jsonb_array_elements(p_records)
  LOOP
    INSERT INTO public.traffic_data (
      area_id,
      timestamp,
      traffic_level,
      density_score
    ) VALUES (
      (v_record->>'area_id')::UUID,
      (v_record->>'timestamp')::TIMESTAMP WITH TIME ZONE,
      (v_record->>'traffic_level')::traffic_level,
      (v_record->>'density_score')::NUMERIC
    );
  END LOOP;
END;
$$;

-- 9. Add function to safely generate analytics
CREATE OR REPLACE FUNCTION public.generate_analytics_safe(
  p_area_id UUID,
  p_analysis_date DATE,
  p_peak_hours JSONB,
  p_avg_density NUMERIC,
  p_busiest_time TIME,
  p_quietest_time TIME,
  p_total_records INTEGER
)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
  INSERT INTO public.traffic_analytics (
    area_id,
    analysis_date,
    peak_hours,
    avg_density,
    busiest_time,
    quietest_time,
    total_records
  ) VALUES (
    p_area_id,
    p_analysis_date,
    p_peak_hours,
    p_avg_density,
    p_busiest_time,
    p_quietest_time,
    p_total_records
  )
  ON CONFLICT (area_id, analysis_date) 
  DO UPDATE SET
    peak_hours = EXCLUDED.peak_hours,
    avg_density = EXCLUDED.avg_density,
    busiest_time = EXCLUDED.busiest_time,
    quietest_time = EXCLUDED.quietest_time,
    total_records = EXCLUDED.total_records;
END;
$$;